  /*
   *
   * Adaptado e Modificado por Weslley Aquino
   * Github: https://github.com/sirwez
   * Twitter: https://twitter.com/sirwezy
   *
   * Rev.01: 02/09/2019
   *
  */
  
  /*
   * Caso use o app Blynk;
   *
   * #define  BLYNK_PRINT Serial
   * #include  <ESP8266WiFi.h>
   * #include  <BlynkSimpleEsp8266.h>
   *
   */
  #include <IRac.h>
  #include <IRrecv.h>
  #include <IRremoteESP8266.h>
  #include <IRsend.h>
  #include <Wire.h>
  #include <LiquidCrystal_I2C.h>
  /*
   * char auth [] = " K5qD_hOOgwgsG_wkFKM47SzGTdBtSZh9 "; // My token
   * char ssid [] = "weslley"; ID wifi
   * char pass [] = "weslley12"; key wifi
   *
   */
  LiquidCrystal_I2C lcd(0x27, 16, 2);
  
  int IR_Recv = 14;   //Receptor Infravermelho (IR)
  const uint16_t IrLed = 12; //Emissor Infravermelho (IR)
  
  IRsend irsend(IrLed);
  IRrecv irrecv(IR_Recv);
  decode_results results;
  int num;
  char palavra[16] = "Temperaturaalores Hexadecimais
  //Raw responsavel por cada sinal enviado do emissor IR ao A/C
  uint16_t powerOffRawData[199] = {4370, 4374,  512, 1662,  512, 576,  514, 1684,  488, 1660,  514, 576,  514, 576,  514, 1684,  488, 580,  538, 548,  514, 1660,  512, 576,  514, 576,  514, 1660,  514, 1658,  514, 576,  514, 1660,  540, 548,  514, 1662,  512, 1684,  488, 1660,  512, 1658,  514, 576,  514, 1658,  514, 1662,  536, 1634,  510, 576,  514, 576,  514, 576,  514, 576,  514, 1684,  490, 576,  514, 578,  538, 1634,  512, 1660,  512, 1662,  510, 576,  514, 576,  514, 576,  514, 576,  514, 578,  540, 548,  514, 576,  514, 574,  514, 1658,  514, 1658,  516, 1658,  514, 1660,  512, 1658,  540, 5194,  4372, 4352,  514, 1660,  512, 576,  514, 1660,  514, 1660,  510, 576,  514, 576,  514, 1660,  512, 578,  538, 550,  514, 1660,  512, 576,  514, 576,  514, 1660,  512, 1684,  490, 574,  514, 1660,  538, 550,  514, 1660,  512, 1660,  512, 1658,  514, 1684,  488, 574,  514, 1660,  512, 1660,  538, 1632,  512, 576,  514, 576,  514, 576,  514, 576,  514, 1660,  512, 576,  514, 578,  538, 1656,  488, 1660,  512, 1684,  488, 576,  514, 576,  514, 576,  514, 578,  512, 578,  538, 550,  514, 576,  514, 576,  514, 1660,  512, 1684,  488, 1660,  512, 1660,  512, 1662,  536};  // COOLIX B27BE0
  uint16_t powerOnRawData[199] =  {4372, 4350,  514, 1660,  512, 576,  514, 1658,  514, 1658,  514, 576,  514, 576,  514, 1658,  514, 578,  518, 570,  512, 1684,  490, 574,  514, 576,  514, 1658,  512, 1684,  490, 576,  514, 1660,  538, 550,  514, 576,  514, 576,  514, 1660,  512, 1660,  512, 1682,  490, 1682,  488, 1662,  538, 1632,  512, 1662,  510, 1684,  490, 576,  514, 576,  514, 576,  514, 576,  514, 578,  538, 550,  512, 1662,  512, 1684,  488, 1662,  510, 1660,  512, 576,  514, 576,  514, 576,  538, 1632,  514, 576,  514, 576,  514, 576,  514, 576,  514, 1660,  512, 1662,  510, 1658,  540, 5190,  4374, 4352,  514, 1658,  512, 576,  514, 1658,  514, 1660,  514, 574,  514, 576,  514, 1684,  488, 578,  530, 558,  514, 1658,  512, 576,  514, 576,  516, 1658,  514, 1660,  512, 576,  514, 1662,  536, 550,  514, 576,  514, 576,  514, 1684,  488, 1658,  514, 1660,  514, 1656,  514, 1662,  536, 1634,  512, 1660,  512, 1658,  512, 576,  514, 574,  514, 576,  514, 574,  514, 578,  538, 550,  514, 1660,  510, 1684,  490, 1658,  514, 1660,  514, 576,  514, 576,  514, 578,  516, 1680,  490, 576,  512, 578,  514, 576,  514, 576,  514, 1660,  512, 1682,  490, 1660,  540};  // COOLIX B21F78
  uint16_t set17RawData[199] =    {4372, 4360,  514, 1656,  514, 576,  514, 1682,  490, 1660,  512, 576,  514, 576,  514, 1660,  512, 578,  538, 548,  514, 1662,  510, 576,  514, 576,  514, 1682,  490, 1682,  490, 576,  514, 1662,  536, 550,  514, 574,  514, 576,  514, 1682,  490, 1660,  514, 1660,  512, 1682,  490, 1684,  514, 1630,  516, 1658,  514, 1682,  490, 576,  514, 576,  514, 576,  514, 574,  514, 578,  538, 550,  514, 576,  514, 576,  514, 576,  514, 1684,  488, 576,  514, 576,  514, 578,  538, 1630,  516, 1658,  514, 1658,  514, 1658,  514, 574,  514, 1658,  514, 1682,  490, 1658,  538, 5192,  4372, 4350,  516, 1680,  490, 576,  514, 1660,  514, 1658,  512, 576,  514, 574,  514, 1660,  512, 578,  540, 548,  514, 1660,  512, 576,  514, 576,  516, 1656,  514, 1684,  488, 576,  514, 1684,  514, 550,  514, 576,  514, 576,  516, 1656,  514, 1682,  490, 1658,  514, 1684,  488, 1662,  538, 1632,  514, 1658,  514, 1682,  490, 576,  512, 576,  514, 576,  514, 576,  514, 578,  540, 548,  514, 576,  514, 576,  514, 576,  516, 1660,  510, 576,  514, 576,  514, 578,  538, 1656,  490, 1658,  514, 1682,  488, 1684,  490, 574,  514, 1684,  490, 1658,  514, 1660,  538};  // COOLIX B21F08
  uint16_t set18RawData[199] =    {4370, 4356,  514, 1658,  512, 576,  514, 1656,  514, 1658,  512, 576,  514, 576,  512, 1658,  514, 578,  538, 548,  514, 1658,  512, 576,  514, 576,  512, 1660,  512, 1656,  514, 576,  512, 1660,  538, 550,  512, 578,  512, 576,  514, 1660,  512, 1656,  514, 1660,  510, 1660,  512, 1662,  536, 1632,  512, 1660,  512, 1660,  510, 576,  512, 576,  514, 576,  514, 576,  512, 580,  538, 548,  514, 574,  514, 576,  512, 1658,  514, 1656,  514, 576,  514, 574,  514, 578,  536, 1634,  512, 1660,  512, 1656,  514, 576,  514, 576,  514, 1660,  512, 1658,  514, 1656,  540, 5190,  4368, 4350,  512, 1658,  512, 576,  514, 1656,  512, 1658,  514, 576,  514, 576,  514, 1658,  512, 578,  538, 548,  514, 1660,  510, 576,  512, 576,  514, 1658,  512, 1658,  514, 574,  514, 1662,  536, 548,  514, 576,  512, 576,  514, 1656,  514, 1660,  510, 1658,  514, 1658,  512, 1660,  538, 1632,  514, 1660,  512, 1658,  512, 576,  514, 576,  514, 576,  514, 574,  514, 578,  536, 550,  514, 576,  514, 576,  514, 1658,  514, 1660,  512, 576,  512, 576,  512, 578,  538, 1632,  514, 1660,  512, 1658,  512, 576,  514, 576,  514, 1660,  512, 1684,  488, 1660,  536};  // COOLIX B21F18
  uint16_t set19RawData[199] =    {4370, 4358,  512, 1658,  514, 576,  514, 1658,  512, 1660,  512, 574,  514, 576,  514, 1658,  512, 578,  520, 566,  514, 1656,  514, 576,  514, 576,  514, 1658,  512, 1658,  514, 576,  512, 1660,  516, 570,  514, 576,  512, 576,  514, 1656,  514, 1660,  512, 1658,  512, 1656,  514, 1660,  538, 1632,  514, 1658,  514, 1658,  512, 576,  514, 576,  512, 576,  514, 576,  514, 578,  538, 550,  512, 578,  512, 1658,  512, 1658,  514, 1658,  514, 576,  514, 576,  514, 578,  538, 1632,  512, 1658,  512, 576,  514, 576,  514, 574,  514, 1660,  512, 1658,  512, 1658,  538, 5192,  4368, 4350,  514, 1658,  514, 574,  514, 1660,  512, 1660,  512, 574,  514, 576,  512, 1658,  514, 578,  518, 570,  514, 1658,  512, 576,  514, 576,  514, 1656,  514, 1658,  512, 576,  514, 1660,  512, 574,  514, 576,  514, 576,  514, 1656,  514, 1658,  512, 1658,  512, 1658,  514, 1660,  514, 1654,  514, 1658,  512, 1660,  510, 576,  514, 576,  512, 578,  512, 576,  514, 578,  538, 550,  512, 576,  514, 1656,  514, 1658,  512, 1660,  512, 574,  514, 576,  512, 578,  538, 1630,  514, 1660,  512, 576,  514, 576,  514, 576,  512, 1658,  514, 1656,  514, 1662,  510};  // COOLIX B21F38
  uint16_t set20RawData[199] =    {4396, 4344,  512, 1658,  512, 576,  514, 1658,  512, 1656,  514, 576,  514, 574,  514, 1658,  512, 578,  538, 550,  512, 1660,  510, 576,  514, 576,  512, 1658,  512, 1658,  512, 574,  514, 1660,  536, 552,  514, 576,  514, 576,  514, 1658,  512, 1658,  512, 1658,  512, 1658,  512, 1662,  516, 1652,  512, 1658,  512, 1660,  512, 576,  512, 576,  514, 576,  514, 574,  514, 576,  518, 568,  514, 576,  514, 1656,  516, 574,  514, 1658,  514, 574,  516, 574,  514, 576,  514, 1656,  512, 1658,  514, 574,  516, 1658,  510, 576,  514, 1656,  516, 1658,  512, 1656,  538, 5192,  4366, 4348,  514, 1658,  512, 574,  516, 1656,  514, 1660,  512, 574,  514, 576,  514, 1660,  510, 576,  514, 572,  514, 1658,  512, 574,  514, 574,  514, 1658,  512, 1660,  512, 576,  514, 1660,  536, 550,  512, 576,  514, 576,  512, 1660,  512, 1658,  512, 1658,  512, 1658,  514, 1660,  514, 1658,  510, 1658,  512, 1656,  514, 576,  514, 576,  514, 574,  514, 574,  514, 578,  540, 548,  514, 576,  512, 1658,  512, 576,  514, 1660,  510, 576,  514, 576,  512, 578,  530, 1640,  514, 1656,  512, 576,  512, 1656,  514, 576,  512, 1658,  514, 1658,  514, 1658,  538};  // COOLIX B21F28
  uint16_t set21RawData[199] =    {4340, 4416,  486, 1660,  512, 574,  514, 1658,  512, 1656,  514, 576,  514, 574,  514, 1658,  514, 578,  516, 572,  514, 1658,  514, 574,  514, 576,  514, 1656,  514, 1658,  512, 576,  514, 1660,  526, 560,  514, 576,  514, 576,  514, 1658,  514, 1658,  514, 1658,  512, 1658,  514, 1660,  538, 1630,  514, 1658,  512, 1656,  516, 576,  514, 574,  514, 576,  514, 576,  514, 578,  538, 550,  514, 1658,  512, 1656,  516, 576,  514, 1658,  512, 576,  514, 576,  514, 578,  538, 1630,  516, 574,  514, 576,  512, 1658,  512, 576,  514, 1656,  514, 1658,  512, 1656,  540, 5192,  4368, 4352,  510, 1656,  514, 574,  514, 1658,  514, 1656,  516, 576,  514, 574,  514, 1660,  512, 576,  514, 574,  514, 1658,  514, 576,  512, 574,  514, 1658,  514, 1658,  512, 578,  512, 1660,  520, 566,  514, 576,  514, 576,  514, 1658,  514, 1656,  514, 1658,  514, 1658,  514, 1660,  536, 1630,  516, 1660,  510, 1656,  516, 574,  514, 576,  512, 576,  514, 576,  514, 578,  514, 572,  514, 1656,  516, 1658,  514, 574,  512, 1658,  514, 576,  514, 574,  514, 578,  514, 1656,  512, 574,  514, 576,  516, 1656,  514, 574,  514, 1656,  514, 1658,  514, 1658,  538};  // COOLIX B21F68
  uint16_t set22RawData[199] =    {4340, 4390,  512, 1658,  512, 576,  514, 1658,  512, 1658,  512, 576,  514, 576,  512, 1658,  514, 578,  536, 548,  514, 1658,  514, 576,  514, 576,  512, 1656,  516, 1656,  516, 574,  514, 1658,  538, 550,  512, 576,  514, 576,  514, 1658,  514, 1658,  512, 1658,  514, 1656,  514, 1658,  536, 1632,  514, 1658,  514, 1658,  514, 574,  514, 574,  514, 576,  514, 576,  514, 578,  514, 572,  514, 1656,  514, 1660,  512, 1656,  514, 1658,  512, 574,  514, 576,  514, 576,  518, 1654,  510, 576,  514, 576,  512, 576,  514, 574,  514, 1658,  514, 1656,  514, 1656,  540, 5190,  4366, 4350,  512, 1656,  514, 576,  514, 1656,  514, 1658,  514, 574,  514, 576,  512, 1656,  514, 576,  538, 550,  514, 1656,  514, 574,  514, 576,  514, 1656,  514, 1660,  512, 574,  514, 1660,  520, 566,  514, 574,  516, 574,  514, 1658,  512, 1658,  512, 1658,  512, 1658,  514, 1660,  538, 1632,  512, 1658,  514, 1656,  514, 576,  512, 576,  514, 576,  514, 574,  514, 576,  538, 548,  514, 1658,  512, 1658,  514, 1658,  514, 1660,  510, 574,  516, 574,  514, 578,  538, 1632,  512, 578,  512, 574,  514, 576,  512, 576,  514, 1656,  514, 1656,  514, 1662,  536};  // COOLIX B21F78
  uint16_t set23RawData[199] =    {4368, 4366,  516, 1658,  514, 574,  514, 1658,  514, 1656,  514, 576,  512, 576,  514, 1658,  514, 578,  536, 550,  514, 1660,  512, 574,  514, 576,  514, 1660,  512, 1660,  512, 576,  512, 1660,  538, 550,  514, 574,  516, 574,  514, 1660,  510, 1658,  514, 1658,  514, 1658,  512, 1658,  540, 1632,  514, 1656,  514, 1658,  512, 576,  514, 574,  516, 574,  514, 574,  514, 576,  540, 548,  514, 1656,  516, 576,  514, 1660,  510, 1658,  512, 576,  514, 574,  514, 578,  514, 1656,  514, 574,  514, 1660,  512, 574,  516, 574,  514, 1658,  514, 1658,  512, 1656,  540, 5190,  4370, 4350,  514, 1658,  512, 576,  514, 1656,  514, 1656,  514, 576,  514, 574,  514, 1656,  516, 576,  538, 550,  514, 1658,  512, 576,  514, 574,  514, 1660,  512, 1658,  514, 576,  514, 1658,  540, 548,  514, 576,  514, 576,  514, 1658,  512, 1660,  512, 1656,  514, 1658,  514, 1660,  538, 1632,  512, 1656,  514, 1660,  512, 576,  514, 574,  514, 576,  514, 576,  514, 576,  538, 548,  514, 1658,  514, 574,  514, 1660,  512, 1658,  514, 574,  514, 576,  512, 578,  538, 1632,  514, 574,  514, 1658,  514, 574,  514, 576,  514, 1656,  514, 1658,  512, 1660,  538};  // COOLIX B21F58
  uint16_t set24RawData[199] =    {4396, 4344,  514, 1656,  514, 574,  514, 1660,  512, 1658,  512, 574,  516, 574,  514, 1656,  514, 576,  540, 548,  514, 1658,  512, 576,  514, 576,  512, 1660,  510, 1658,  512, 576,  514, 1660,  538, 548,  514, 576,  514, 574,  514, 1658,  514, 1656,  516, 1656,  514, 1658,  514, 1658,  538, 1632,  514, 1656,  514, 1656,  514, 576,  514, 574,  516, 574,  514, 576,  514, 578,  526, 560,  514, 1658,  514, 574,  514, 574,  516, 1658,  512, 574,  514, 574,  514, 576,  540, 1630,  514, 574,  514, 1656,  516, 1656,  514, 574,  514, 1656,  514, 1658,  514, 1656,  540, 5190,  4370, 4350,  514, 1658,  514, 574,  514, 1660,  512, 1656,  514, 574,  516, 576,  514, 1658,  514, 578,  516, 570,  514, 1658,  514, 574,  514, 576,  514, 1658,  512, 1658,  514, 576,  512, 1658,  540, 548,  514, 576,  514, 576,  514, 1658,  514, 1658,  512, 1660,  512, 1656,  514, 1658,  538, 1628,  516, 1658,  514, 1658,  514, 574,  514, 576,  514, 574,  514, 574,  516, 576,  538, 548,  514, 1658,  514, 574,  516, 574,  514, 1658,  514, 576,  514, 574,  514, 576,  538, 1632,  512, 574,  516, 1658,  512, 1656,  514, 576,  512, 1660,  512, 1660,  512, 1660,  518};  // COOLIX B21F48
  uint16_t set25RawData[199] =    {4372, 4342,  514, 1656,  514, 576,  514, 1658,  514, 1652,  516, 574,  514, 576,  514, 1682,  488, 578,  538, 548,  514, 1658,  512, 576,  514, 574,  514, 1658,  512, 1656,  514, 574,  514, 1658,  538, 550,  514, 574,  514, 574,  514, 1656,  516, 1656,  516, 1656,  514, 1656,  514, 1660,  514, 1654,  514, 1658,  514, 1656,  514, 574,  514, 576,  514, 574,  514, 576,  514, 578,  538, 1630,  516, 1682,  488, 574,  514, 574,  514, 1656,  514, 576,  514, 576,  514, 576,  540, 548,  514, 574,  514, 1656,  516, 1656,  514, 576,  514, 1656,  514, 1656,  514, 1656,  542, 5188,  4370, 4350,  514, 1656,  514, 574,  514, 1656,  514, 1656,  514, 574,  514, 574,  514, 1656,  514, 578,  538, 548,  514, 1656,  514, 576,  514, 576,  514, 1658,  512, 1656,  514, 574,  514, 1658,  538, 548,  516, 576,  514, 574,  514, 1658,  512, 1658,  514, 1656,  514, 1658,  514, 1660,  538, 1630,  514, 1658,  512, 1658,  512, 574,  514, 576,  514, 574,  516, 574,  514, 578,  538, 1630,  514, 1660,  512, 576,  514, 574,  516, 1656,  514, 574,  514, 576,  514, 578,  538, 548,  514, 576,  514, 1656,  514, 1658,  514, 574,  514, 1658,  514, 1656,  514, 1658,  538};  // COOLIX B21FC8
  //PadrÃ£o Hexadecimal convertido para Decimal:
  
  void setValor(int num)
  {
  
    switch(num)
    {
  
    case 0:
    {
      irsend.sendRaw(powerOffRawData, 199, 38);
      delay(10);
      lcd.clear();
      char desligar[14] = "Desligando...";
      lcd.clear();
      for(int i = 0; i < 13; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(desligar[i]);
  
      }
      lcd.clear();
      break;
    }
    case 1:
    {
      irsend.sendRaw(powerOnRawData, 199, 38);
      delay(10);
      char temp22[3] = {"22"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp22[j]);
      }
      break;
    }
    case 17:
    {
      irsend.sendRaw(set17RawData, 199, 38);
      delay(10);
      char temp17[3] = {"17"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp17[j]);
      }
      break;
    }
  
    case 18:
    {
      irsend.sendRaw(set18RawData, 199, 38);
      delay(10);
      char temp18[3] = {"18"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp18[j]);
      }
      break;
    }
    case 19:
    {
      irsend.sendRaw(set19RawData, 199, 38);
      delay(10);
      char temp19[3] = {"19"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp19[j]);
      }
      break;
    }
    case 20:
    {
      irsend.sendRaw(set20RawData, 199, 38);
      delay(10);
      char temp20[3] = {"20"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp20[j]);
      }
      break;
    }
    case 21:
    {
      irsend.sendRaw(set21RawData, 199, 38);
      delay(10);
      char temp21[3] = {"21"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp21[j]);
      }
      break;
    }
    case 22:
    {
      irsend.sendRaw(set22RawData, 199, 38);
      delay(10);
      char temp222[3] = {"22"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp222[j]);
      }
      break;
    }
    case 23:
    {
      irsend.sendRaw(set23RawData, 199, 38);
      delay(10);
      char temp23[3] = {"23"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp23[j]);
      }
      break;
    }
    case 24:
    {
      irsend.sendRaw(set24RawData, 199, 38);
      delay(10);
      char temp24[3] = {"24"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp24[j]);
      }
      break;
    }
    case 25:
    {
      irsend.sendRaw(set25RawData, 199, 38);
      delay(10);
      char temp25[3] = {"25"};
      lcd.clear();
      for(int i = 0; i < 12; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(palavra[i]);
  
      }
      for(int j = 0; j < 3; j++)
      {
        lcd.setCursor(j, 1);
        lcd.print(temp25[j]);
      }
      break;
    }
    default:
    {
      lcd.clear();
      char erro[10] = {"Error 404"};
      for(int i = 0; i < 10; i++ )
      {
  
        lcd.setCursor(i, 0);
        lcd.print(erro[i]);
      }
    }
    }
  
  }
  void setup()
  {
  
    Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
    irrecv.enableIRIn(); //inicia o receptor infravermelho (IR)
    irsend.begin();
    lcd.begin(16, 2);
    lcd.init();
    lcd.backlight();
  //Blynk.begin (auth, ssid, pass);
  
  }
  
  void loop()
  {
  
    if (irrecv.decode(&results))  //decodificamos a entrada do receptor infravermelho
    {
  
      switch (results.value)  //SWITCH CASE para usar o botÃ£o pressionado do controle remoto
      {
  
  
      case 16720605: //ligar (seta esquerda)
      {
  
        num = 1;
        setValor(num);
  
        break;
      }
  
  
      case 16761405: //desligar (seta direita)
      {
  
        num = 0;
        setValor(num);
  
        break;
      }
  
  
      case 16738455: //17
      {
        num = 17;
        setValor(num);
  
        break;
      }
  
  
      case 16750695: //18
      {
        num = 18;
        setValor(num);
  
        break;
      }
  
  
      case 16756815: //19
      {
        num = 19;
        setValor(num);
  
        break;
      }
  
  
      case 16724175: //20
      {
        num = 20;
        setValor(num);
  
        break;
      }
  
  
      case 16718055: //21
      {
        num = 21;
        setValor(num);
  
        break;
      }
  
  
      case 16743045: //22
      {
        num = 22;
        setValor(num);
  
        break;
      }
  
  
      case 16716015: //23
      {
        num = 23;
        setValor(num);
  
        break;
      }
  
  
      case 16726215: //24
      {
        num = 24;
        setValor(num);
  
        break;
      }
  
  
      case 16734885: //25
      {
        num = 25;
        setValor(num);
  
        break;
      }
  
  
      case 16736925: //seta pra cima
      {
        num = num + 1;
        setValor(num);
  
        break;
      }
  
  
      case 16754775: //seta pra baixo
      {
        num = num - 1;
        setValor(num);
  
        break;
      }
  
      }
      irrecv.resume(); // Recebe o prÃ³ximo valor do botÃ£o que pressionamos
    }
    delay(10);
  }
